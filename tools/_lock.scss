/*  =========================================================================
    tools.lock
    Perfect smooth scaling between any 2 values over any viewport range.
    The property will start scaling and stop scaling exactly where you want.
    As per: https://blog.typekit.com/2016/08/17/flexible-typography-with-css-locks/
    ========================================================================= */

/*  Use/Forward rules
    `@use` or `@forward` everything you need here from other files.
    These can include variables, mixins & other includes.
    ========================================================================= */

@use 'sass:math';
@use 'sass:map';
@use 'responsive';
@use 'rem';
@use '_internal/functions';
@use '../settings/defaults';



/*  Generate
    Basic usage:

    @include lock.generate(font-size, 18px, 24px);

    This will scale the property perfectly and smooth from 18px
    on `lap` breakpoint to 24px on `desk` breakpoint.

    You can also redefine the min- and max breakpoints like this:

    @include lock.generate(padding, 18px, 24px, desk, wall);
    ========================================================================= */

@mixin generate($property: font-size, $size-min: 16px, $size-max: 20px, $min-bp: lap, $max-bp: desk) {
  @if (math.unit($size-min) == 'px' and math.unit($size-max) == 'px' and math.unit(map.get(defaults.$breakpoints, $min-bp)) == 'px' and math.unit(map.get(defaults.$breakpoints, $max-bp)) == 'px') {
    $size-min-rem: rem.convert($size-min);
    $size-max-rem: rem.convert($size-max);
    #{$property}: $size-min-rem;

    @if ($size-min != $size-max) {
      @include responsive.mq($from: $min-bp) {
        #{$property}: calc(#{$size-min-rem} + #{functions.strip-units($size-max-rem - $size-min-rem)} * ((100vw - #{(rem.convert(map.get(defaults.$breakpoints, $min-bp)))}) / #{functions.strip-units(rem.convert(map.get(defaults.$breakpoints, $max-bp) - map.get(defaults.$breakpoints, $min-bp)))})); // stylelint-disable-line max-line-length
      }

      @include responsive.mq($from: $max-bp) {
        #{$property}: $size-max-rem;
      }
    } @else {
      @warn '$size-min and $size-max are the same, skipping breakpoints';
    }
  } @else {
    @error '$size-min, $size-max, $min-bp and $max-bp should be defined in px.';
  }
}
