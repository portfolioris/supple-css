/*  =========================================================================
    tools.responsive
    desc
    ========================================================================= */

/*  Use/Forward rules
    `@use` or `@forward` everything you need here from other files.
    These can include variables, mixins & other includes.
    ========================================================================= */

@use 'sass:list';
@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use '../settings/defaults';
@use '../vendor/sass-mq/mq' as sassmq;
@use '_internal/functions';
@use 'rem';



/*  Wrappers to sass-mq
    ========================================================================= */

@mixin mq($args...) {
  @include sassmq.mq($args...) {
    @content;
  }
}

@mixin add-breakpoint($args...) {
  @include sassmq.mq-add-breakpoint($args...);
}

@mixin show-breakpoints($args...) {
  @include sassmq.mq-show-breakpoints($args...);
}



/*  supple-mq
    A little wrapper around sass-mq which alows us to pass in a string based
    direction instead of direction variable.

    Example usage:
    @include supple-mq(wall, until) {
      outline: 1px solid #ff0000;
    }
    ========================================================================= */

@mixin supple-mq($name, $direction: from) {
  @if ($direction == from) {
    @include mq($from: $name) {
      @content;
    }
  } @else if ($direction == until) {
    @include mq($until: $name) {
      @content;
    }
  } @else {
    @error '#{$direction} is not a valid sass-mq direction';
  }
}



/*  Clamp
    Basic usage:

    font-size: responsive.clamp(18px, 24px);

    This will scale the property perfectly and smooth from 18px
    on `lap` breakpoint to 24px on `desk` breakpoint.

    You can also redefine the min- and max breakpoints like this:

    padding: responsive.clamp(18px, 24px, desk, wall);
    ========================================================================= */

@function clamp($size-min: 16px, $size-max: 20px, $min-bp: lap, $max-bp: desk) {
  $return: $size-min;

  @if map.has-key(defaults.$breakpoints, $min-bp) and map.has-key(defaults.$breakpoints, $max-bp) {
    @if (math.unit($size-min) == 'px' and math.unit($size-max) == 'px' and math.unit(map.get(defaults.$breakpoints, $min-bp)) == 'px' and math.unit(map.get(defaults.$breakpoints, $max-bp)) == 'px') {
      $min-bp-value: map.get(defaults.$breakpoints, $min-bp);
      $max-bp-value: map.get(defaults.$breakpoints, $max-bp);

      $min-bp-rem-unitless: functions.strip-units(rem.convert($min-bp-value));
      $max-bp-rem-unitless: functions.strip-units(rem.convert($max-bp-value));

      $size-min-rem: rem.convert($size-min);
      $size-min-rem-unitless: functions.strip-units($size-min-rem);
      $size-max-rem: rem.convert($size-max);
      $size-max-rem-unitless: functions.strip-units($size-max-rem);

      $slope: ($size-max-rem-unitless - $size-min-rem-unitless) / ($max-bp-rem-unitless - $min-bp-rem-unitless);
      $yAxisIntersection: -($min-bp-rem-unitless) * $slope + $size-min-rem-unitless;

      $return: #{clamp}($size-min-rem, #{$yAxisIntersection * 1rem} #{' + '} #{($slope * 100) * 1vw}, $size-max-rem);
    } @else {
      @error '$size-min, $size-max, $min-bp and $max-bp should be defined in px.';
    }
  } @else {
    @error '`$min-bp: #{$min-bp}` or `$max-bp: #{$max-bp}` should be defined in `defaults.$breakpoints`';
  }

  @return $return;
}



/*  in-breakpoint
    A little helper mixin to quickly create responsive variants of a certain
    selector. The mixin's `@content` will be also applied to the parent selector.

    Example usage:
    $YOURMODULE-in-breakpoint: (
      from: lap desk,
      until: desk,
    );
    .your-module {
      @include responsive.in-breakpoint($YOURMODULE-in-breakpoint) {
        outline: 1px solid #ff0000;
      }
    }
    ========================================================================= */


@mixin in-breakpoint($breakpoints) {
  @content;

  @each $breakpoint in $breakpoints {
    @if ((list.nth($breakpoint, 1) == 'from' or list.nth($breakpoint, 1) == 'until') and list.nth($breakpoint, 2)) {
      // if the second argument is a list, loop over it
      @if meta.type-of(list.nth($breakpoint, 2)) == 'list' {
        @each $point in list.nth($breakpoint, 2) {
          @include supple-mq($point, list.nth($breakpoint, 1)) {
            &#{defaults.$responsive-modifier}#{list.nth($breakpoint, 1)}-#{$point} {
              @content;
            }
          }
        }
      } @else {
        @include supple-mq(list.nth($breakpoint, 2), list.nth($breakpoint, 1)) {
          &#{defaults.$responsive-modifier}#{list.nth($breakpoint, 1)}-#{list.nth($breakpoint, 2)} {
            @content;
          }
        }
      }
    } @else {
      @include supple-mq($breakpoint) {
        &#{defaults.$responsive-modifier}from-#{$breakpoint} {
          @content;
        }
      }
    }
  }
}
